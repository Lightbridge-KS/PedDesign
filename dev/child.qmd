---
title: "child"
format: html
---

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
here::i_am("dev/child.qmd")
library(here)
```


## kV

Input: `weight_kg` numeric
Output: kV in Chr

```{r get_kV}
get_kV <- function(weight_kg) {
  
  stopifnot(is.numeric(weight_kg) & weight_kg > 0)
  
  kV <- if(weight_kg < 20) {
    "80"
  } else if (weight_kg == 20) {
    "80 or 100"
  } else if (weight_kg < 45) {
    "100"
  } else if (weight_kg == 45) {
    "100 or 120"
  } else if (weight_kg <= 60) {
    "120"
  } else {
    # weight_kg â‰¥ 60
    "120 ?"
  }
  
  kV
  
}

get_kV(19)
get_kV(20)
get_kV(25)
get_kV(45)
get_kV(55)
get_kV(60)
get_kV(100)
```

## Contrast (ml)


```{r get_contrast_ml}
get_contrast_ml <- function(ml_kg, weight_kg){
  
  stopifnot(is.numeric(weight_kg) & weight_kg > 0)
  ml <- ml_kg * weight_kg
  
  # Maximum contrast = 80 ml
  if (ml >= 80) return(80)
  round(ml, 1)
  
}

get_contrast_ml(2, 3)
get_contrast_ml(2, 60)
```


```{r print_contrast}
print_contrast <- function(ml_kg, weight_kg) {
  
  ml <- ml_kg * weight_kg
  ml_adj_txt <- if (ml >= 80) {
    "80 ml [maximum]"
  } else {
    paste0(round(ml, 1), " ml")
  }

  cat(glue::glue("Contrast: {ml_adj_txt} ({ml_kg} ml/kg * {weight_kg} kg = {ml}) "))
  
}

print_contrast(1, 3)
```

## Rate (ml/sec)

```{r print_rate_ml_sec}
print_rate_ml_sec <- function(contrast_ml, 
                              rate_formula = c("no_delay", "delay"),
                              delay_sec = NULL
                              ) {
  
  rate_formula <- match.arg(rate_formula)
  stopifnot(is.numeric(contrast_ml) & contrast_ml > 0)
  
  switch (rate_formula,
    "no_delay" = {
      
      rate <- (contrast_ml + 15) / 45 
      rate_adj <- round_up_decimal(rate, 1) # Round up for 1 decimal
      
      show_calc <- glue::glue("({contrast_ml} + 15) / 45 = {round(rate, 3)}")
  
      
      },
    "delay" = { 
      
      stopifnot(is.numeric(delay_sec))
      
      rate <- (contrast_ml + 15) / (delay_sec - 15) 
      rate_adj <- round_up_decimal(rate, 1) # Round up for 1 decimal
      
      show_calc <- glue::glue("({contrast_ml} + 15) / ({delay_sec} - 15) = {round(rate, 3)}")
      
      }
  )
  
  cat(glue::glue("Rate: {rate_adj} ml/sec {show_calc}"))
}

print_rate_ml_sec(12)
print_rate_ml_sec(122)
print_rate_ml_sec(12, "delay", 70)
```

## Helper: Round Up

```{r round_up_decimal}
round_up_decimal <- function(x, level = 1) {
  z <- 10^level
  ceiling(x * z) / z
}


round_up_decimal(1.2)
round_up_decimal(1.234, 2)
```

